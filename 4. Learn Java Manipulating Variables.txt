** 4. Learn Java: Manipulating Variables
-------------------------------------

* Introduction
--------------
	Let’s say we are writing a program that represents a user’s bank account. With variables, we know how to store a balance! We’d use a double, the primitive type that can hold big 
	decimal numbers. But how would we deposit and withdraw from the account?

	Lucky for us, we have the ability to manipulate the value of our variables. We can use expressions, arithmetic operators, and more in order to change our variables’ values.

	For example, Java has built-in arithmetic operations that perform calculations on numeric values:

		// declare initial balance
		double balance = 20000.99;
		// declare deposit amount
		double depositAmount = 1000.00;
		// store result of calculation in our original variable
		balance = balance + depositAmount;

	In the final line of the code above, we used the expression balance + depositAmount to determine the new value of the balance variable. When an expression is executed, it produces 
	a single value.

	The data type of a variable plays a large role in the operations we can use to manipulate it. We can think of a data type as a combination of a set of values, and a set of 
	operations on those values. For example, the double data type is comprised of values like 4.8 and operations like addition (+). For now, we’ll mainly focus on the set of 
	operations that can be used on numbers and booleans.

	The data type of an expression is determined by the resulting value. For example, an expression that uses two int values will evaluate to an int value. If an expression contains a 
	double value, then the resulting value will also be type double.

	Throughout this lesson, we will learn how to manipulate variables of different data types.

GuessingGame.java
-----------------
public class GuessingGame {
	public static void main(String[] args) {   
		int mystery1 = 8 + 6;
    int mystery2 = 8 - 6;
    System.out.println(mystery2);
	}
}

==================================================================================================================================================================

* Addition and Substraction
---------------------------
	In our bank account example from the last exercise, we used the + operator to add the values balance and depositAmount:

		double balance = 20000.99;
		double depositAmount = 1000.0;
		balance = balance + depositAmount;
		// balance now holds 21000.99

	If we wanted to withdraw from the balance, we would use the - operator:

		double withdrawAmount = 500;
		balance = balance - withdrawAmount;
		// balance now holds 19500.99

	Addition and subtraction work with int type values as well! If we had 60 pictures of cats on our phone, and we took 24 more, we could use the following line of code to store 84 in 
	numPicturesOfCats.

		int numPicturesOfCats = 60 + 24;

	What if we took one additional picture of our cat? We can reflect this change using an increment operator ++. When we append ++ to a number-based variable, it increases the value 
	by 1. We also have the decrement operator, --, which decreases the value by 1.

		// Take a picture
		numPicturesOfCats++ // Value is now 85
 
		// Delete a picture
		numPicturesOfCats-- // Value is now 84

PlusAndMinus.java
-----------------
public class PlusAndMinus {
	public static void main(String[] args) {   
		int zebrasInZoo = 8;
    int giraffesInZoo = 4;
    int animalsInZoo = zebrasInZoo + giraffesInZoo;
    System.out.println(animalsInZoo);
    
    int numZebrasAfterTrade = zebrasInZoo - 2;
    System.out.println(numZebrasAfterTrade);
	}
}

=================================================================================================================================================================

* Multiplication and Division 
-----------------------------
	Let’s say that our employer is calculating our paycheck and depositing it to our bank account. We worked 40 hours last week, at a rate of $15.50 an hour. Java can calculate this 
	with the multiplication operator *:

		double paycheckAmount = 40 * 15.50;
		//paycheckAmount now holds 620.0

	If we want to see how many hours our total balance represents, we use the division operator /:

		double balance = 20010.5;
		double hourlyRate = 15.5;
		double hoursWorked = balance / hourlyRate;
		//hoursWorked now holds 1291.0

	Division has different results with integers. The / operator does integer division, which means that any remainder is lost.

		int evenlyDivided = 10 / 5;
		//evenlyDivided holds 2, because 10 divided by 5 is 2
		int unevenlyDivided = 10 / 4;
		//unevenlyDivided holds 2, because 10 divided by 4 is 2.5

	evenlyDivided stores what you expect, but unevenlyDivided holds 2 because ints cannot store decimals! It’s important to note that the int doesn’t round the decimal, but floors it. 
	Java removes the 0.5 to fit the result into an int type!

	It’s important to note that if we try to divide any number by 0, we will get an ArithmeticException error as a result.

MultAndDivide.java
------------------
public class MultAndDivide {
	public static void main(String[] args) {   
		double subtotal = 30;
    double tax = 0.0875;

    double total = subtotal + subtotal * tax;
    System.out.println(total);

    double perPerson = total / 4;
    System.out.println(perPerson);
	}
}

==================================================================================================================================================================

* Modulo
--------
	If we baked 10 cookies and gave them out in batches of 3, how many would we have leftover after giving out all the full batches we could?

	The modulo operator %, gives us the remainder after two numbers are divided.

		int cookiesBaked = 10;
		int cookiesLeftover = 10 % 3;
		//cookiesLeftover holds 1

	You have 1 cookie left after giving out all the batches of 3 you could!

	Modulo can be a tricky concept, so let’s try another example.

	Imagine we need to know whether a number is even or odd. An even number is divisible by 2.

	Modulo can help! Dividing an even number by 2 will have a remainder of 0. Dividing an odd number by 2 will have a remainder of 1.

		7 % 2
		// 1, odd!
		8 % 2
		// 0, even!
		9 % 2
		// 1, odd!

Modulo.java
-----------
public class Modulo {
	public static void main(String[] args) {   
		int students = 26;
    int leftOut = students % 3;
    System.out.println(leftOut);
	}
}

==================================================================================================================================================================

* Compound Assignment Operators
-------------------------------
	Sometimes, we need to adjust the value of a variable.

	Imagine we’re working at a bake sale and want to keep track of how many cupcakes we have by creating a variable called numCupcakes:

		int numCupcakes = 12;

	If we baked 8 more cupcakes, we know that we could update our variable using the + operator:

		numCupcakes = numCupcakes + 8; // Value is now 20
	
	While this method works just fine, we had to write our variable numCupcakes twice. We can shorten this syntax by using a compound assignment operator.

	Compound assignment operators perform an arithmetic operation on a variable and then reassigns its value. Using the += compound assignment operator, we can rewrite our previous 
	code like so:

		numCupcakes += 8; // Value is now 20

	Now we only need to reference numCupcakes once.

	We can use compound assignment operators for all of the arithmetic operators we’ve covered:

		. Addition (+=)
		
		. Subtraction (-=)

		. Multiplication (*=)
		
		. Division (/=)
	
		. Modulo (%=)

==================================================================================================================================================================




























